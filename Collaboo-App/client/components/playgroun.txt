
openModal() {
    this.setState({ isModalOpen: true });
    console.log("heelloooo", this.state);
  }

  closeModal() {
    this.setState({ isModalOpen: false });
  }
<View style={styles.viewStyle}>
        <Item onPress={() => this.openModal()}>
          <Icon active name="ios-mail" />
        </Item>
        <Modal transparent={true} visible={this.state.isModalOpen}>
          <View
            style={{
              flex: 1,
              flexDirection: "column",
              justifyContent: "center",
              alignItems: "center",
              backgroundColor: "#00000080",
            }}
          >
            <View
              style={{
                width: 300,
                height: 600,
                backgroundColor: "#fff",
                paddingVertical: 40,
                paddingHorizontal: 10,
              }}
            >
              <MaterialIcons
                style={styles.modalCloseIcon}
                name="close"
                size={24}
                onPress={() => this.closeModal()}
              />
              <Text style={styles.modalHeader}>Choose your Categories</Text>
              <View
                style={{
                  flexDirection: "row",
                  alignItems: "center",
                  justifyContent: "space-evenly",
                  marginVertical: 30,
                }}
              >
                <FlatList
                style={{}}
                  data={this.state.modaldata}
                  renderItem={({ item }) => (
            <View>
            <CheckBox value = {this.state.check} onPress = {() => this.setState({check: !this.state}) }/>
            <Text>{item}</Text>
            </View>
          )}
          enableEmptySections={true}
          style={{ marginTop: 10 }}
          keyExtractor={(item, index) => index.toString()}
                />
              </View>
            </View>
          </View>
        </Modal>
      </View>

      makeRemoteRequest = () => {
    const url = "http://81.89.193.99:3001/api/search/craftsmen_agent";
    const bearer = "Bearer " + this.props.token;
    // Platform.OS === "android"
    //   ? "http://10.0.2.2:3000/craftsmen"
    //   : "http://192.168.0.213:3000/craftsmen";
    fetch(url, { method: "GET", headers: { Authorization: bearer } })
      .then((response) => response.json())
      .then((responseJson) => {
        this.setState(
          {
            isLoading: false,
            dataSource: responseJson,
          },
          function () {
            this.arrayholder = responseJson;
          }
        );
      })
      .catch((error) => {
        console.error(error);
      });
  }
  // makeRemoteRequest = () => {
  //   
  // };

     {/* <CheckBox
            //value={this.state.selfEmployed}
            onPress={() =>
              this.setState({ selfEmployed: !this.state.selfEmployed })
            }
            checked = {this.state.selfEmployed}
            style={styles.selfEmployed}
          /> */}



          import React, { Component } from "react";
import {
  View,
  StyleSheet,
  FlatList,
  ActivityIndicator,
  Platform,
  Modal,
  Button,
  Text,
  TouchableOpacity,
  Keyboard,
  TouchableWithoutFeedback
} from "react-native";
import { HeaderButtons, Item } from "react-navigation-header-buttons";
import HeaderButton from "../components/HeaderButton";
import { SearchBar, ListItem } from "react-native-elements";
import Colors from "../constants/Colors";
import SingleChatScreen from "../screens/SingleChatScreen";
import { connect } from "react-redux";
 class ChatScreen extends Component {
  constructor(props) {
   // console.log("chat", props)
    super(props);
    //setting default state
    this.state = {
      isLoading: true,
      search: ""
    };
    this.arrayholder = [];
  }
  componentDidMount() {
    setTimeout(
      () => this.makeRemoteRequest(),
      3000,
  );
  }
//     getAllChats () {
//     // const userId = this.props.navigation.getParam("userId");
//     // const messages = this.state.messages
//         const action = {type: 'chat:allchats/get', data:{}}
//         this.state.socket.emit('action', action)
//         this.state.socket.on('action', (action) => {
//             //console.log("from postUserChats: ", action)
//             const allChats = action.type === 'chats' ? action.data : ""
//             console.log("Get all chats: ", allChats)
//             this.setState({
//                 users: allChats.data.crafstmenid
//             })
//         })
//         this.state.socket.on('error', (error) => {
//             console.log("from get all chats", error)
//           });
// }
  makeRemoteRequest = () => {
    const url = "http://81.89.193.99:3001/api/search/craftsmen_agent"
    const bearer = "Bearer " + this.props.token;
      // Platform.OS === "android"
      //   ? "http://10.0.2.2:3000/craftsmen"
      //   : "http://192.168.0.213:3000/craftsmen";
    fetch(url, { method: "GET", headers: { 'Authorization': bearer }})
      .then((response) => response.json())
      .then((responseJson) => {
        this.setState(
          {
            isLoading: false,
            dataSource: responseJson,
          },
          function () {
            this.arrayholder = responseJson;
          }
        );
      })
      .catch((error) => {
        console.error(error);
      });
  };
  search = (text) => {
    console.log(text);
  };
  clear = () => {
    this.search.clear();
  };
  SearchFilterFunction(text) {
    //passing the inserted text in textinput
    const newData = this.arrayholder.filter(function (item) {
      //applying filter for the inserted text in search bar
      console.log("itemdata", item)
      const fNameData = item.fname ? item.fname.toUpperCase() : "".toUpperCase();
      const lNameData = item.lname ? item.lname.toUpperCase() : "".toUpperCase();
      //const companyName = item.compid.compname
      const companyData = item && item.compid ? item.compid.compname.toUpperCase() : "".toUpperCase();
      const textData = text.toUpperCase();
      const itemData = fNameData + lNameData + companyData;
      return itemData.indexOf(textData) > -1;
    });

    this.setState({
      //setting the filtered newData on datasource
      //After setting the data it will automatically re-render the view
      dataSource: newData,
      search: text,
    });
  }

  ListViewItemSeparator = () => {
    //Item sparator view
    return (
      <View
        style={{
          height: 0.3,
          width: "90%",
          backgroundColor: "#080808",
        }}
      />
    );
  };
  renderFooter = () => {
    if (!this.state.loading) return null;

    return (
      <View
        style={{
          paddingVertical: 20,
          borderTopWidth: 1,
          borderColor: "#CED0CE",
        }}
      >
        <ActivityIndicator animating size="large" />
      </View>
    );
  };
  render() {
    if (this.state.isLoading) {
      //Loading View while data is loading
      return (
        <View style={{ flex: 1, paddingTop: 20 }}>
          <ActivityIndicator />
        </View>
      );
    }
    return (
      //ListView to show with textinput used as search bar
      <TouchableWithoutFeedback onPress = {() =>{
        Keyboard.dismiss()
      }}>
      <View style={styles.viewStyle}>
      <SearchBar
        lightTheme={true}
        platform="default"
        only
        round
        platform="default"
        only
        searchIcon={{ size: 24 }}
        onChangeText={(text) => this.SearchFilterFunction(text)}
        onClear={(text) => this.SearchFilterFunction("")}
        placeholder="Type Here..."
        value={this.state.search}
      />
        <FlatList
          data={this.state.dataSource}
          ItemSeparatorComponent={this.ListViewItemSeparator}
          ListFooterComponent={this.renderFooter}
          //Item Separator View
          renderItem={({ item }) => (
            // Single Comes here which will be repeatative for the FlatListItems
            //<Text style={styles.textStyle}>{item.name}</Text>
            <ListItem
              title={item.fname + item.lname}
              subtitle={item.phno}
              containerStyle={{ borderBottomWidth: 0 }}
              rightIcon={{ name: "message" }}
              onPress={() =>
                this.props.navigation.navigate("SingleChat", {
                  name: item.fname + item.lname,
                  userId: item._id
                })
              }
            />
          )}
          enableEmptySections={true}
          style={{ marginTop: 10 }}
          keyExtractor={(item, index) => index.toString()}
        />
      </View>
      </TouchableWithoutFeedback>
      
    );
  }
}

ChatScreen.navigationOptions = {
    headerRight: (
      <HeaderButtons HeaderButtonComponent={HeaderButton}>
        <Item
          title="Favorite"
          iconName="ios-star"
          onPress={() =>{console.log("Added as fav")}}
        />
      </HeaderButtons>
    )
  };

  const mapStateToProps = (state) => ({
    token: state.userReducer.token,
  });

  const styles = StyleSheet.create({
    viewStyle: {
      justifyContent: "center",
      flex: 1,
      backgroundColor: "white",
      marginTop: Platform.OS == "ios" ? 10 : 0,
    },
    textStyle: {
      padding: 10,
    },
    modalInput: {
      paddingVertical: 20,
      borderBottomColor: Colors.primary,
      backgroundColor: "#ffffff",
    },
    requestButton: {
      marginRight: 40,
      marginLeft: 40,
      paddingTop: 10,
      paddingBottom: 10,
      backgroundColor: Colors.primary,
      borderRadius: 10,
      marginTop: -35,
      position: 'relative',
      borderWidth: 1,
      borderColor: "#fff",
    },
    buttonText: {
      color: "#fff",
      textAlign: "center",
      paddingLeft: 10,
      paddingRight: 10,
    },
  });

  export default connect(mapStateToProps, null)(ChatScreen);